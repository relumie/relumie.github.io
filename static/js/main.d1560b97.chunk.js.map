{"version":3,"sources":["utils/util_common.js","components/contexts.js","components/modals/modal_alert.js","styles/cs.js","components/modals/modal_wrapper.js","components/app.js","reportWebVitals.js","index.js"],"names":["UtilCommon","ms","Promise","resolve","setTimeout","app_state_default","modal_alerts","AppState","React","createContext","ModalAlert","props","style","maxHeight","overflow","type","onClick","onCancel","whiteSpace","lineBreak","width","maxWidth","message","onConfirm","defaultProps","cs","classNames","bind","styles","ModalWrapper","useState","visible","setVisible","opacity","setOpacity","modals","setModals","useEffect","animation_duration","a","delay","length","showModal","hideModal","id","className","e","console","log","closeCurrentModal","App","useReducer","prev_state","new_state","state","setState","message_modals","setMessageModals","closeMessageModal","p_modal_alerts","n_message_modals","slice","shift","document","getElementsByTagName","classList","remove","pushMessageModal","Modal","reject","add","p_message_modals","push","Provider","value","Object","assign","Fragment","height","modal_result","JSON","stringify","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d1560b97.chunk.js","sourcesContent":["class UtilCommon {\r\n  static async delay(ms) {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n  }\r\n}\r\nexport default UtilCommon;","import React from 'react';\r\n\r\nconst app_state_default = {\r\n  modal_alerts: []\r\n};\r\nconst AppState = React.createContext(app_state_default);\r\n\r\nexport {\r\n  AppState, app_state_default,  \r\n};","const ModalAlert = (props) => {\r\n  return ( \r\n    <div style={{ maxHeight: `${80}vh`, overflow: 'auto' }}>\r\n      <div>\r\n        <button type='button' onClick={props.onCancel}>×</button>\r\n      </div>\r\n      <div style={{whiteSpace: 'pre-wrap', lineBreak: \"anywhere\", width: `${720}px`, maxWidth: `${90}vw`}}>\r\n        {props.message}\r\n      </div>\r\n      <div>\r\n        <button type='button' onClick={props.onConfirm}>Ok</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nModalAlert.defaultProps = {\r\n  message: 'NO MESSAGE',\r\n  onConfirm: () => {},\r\n  onCancel : () => {},\r\n}\r\n \r\nexport default ModalAlert;","import classNames from 'classnames/bind';\r\nimport styles from './_styles.scss';\r\nconst cs = classNames.bind(styles);\r\nexport default cs;","import React, { useEffect } from 'react';\r\nimport cs from '../../styles/cs';\r\nimport UtilCommon from '../../utils/util_common';\r\n\r\nconst ModalWrapper = (props) => {\r\n  const [visible, setVisible] = React.useState(false);\r\n  const [opacity, setOpacity] = React.useState(false);\r\n  const [modals, setModals] = React.useState([]);\r\n\r\n  useEffect(() => {\r\n    async function showModal(animation_duration) {\r\n      setOpacity(false);\r\n      setVisible(true);\r\n      setModals(props.modals);\r\n      await UtilCommon.delay(200);\r\n      setOpacity(true);\r\n    };\r\n\r\n    async function hideModal(animation_duration) {\r\n      setOpacity(false);\r\n      await UtilCommon.delay(200);\r\n      setVisible(false);\r\n      setModals(props.modals);\r\n    }\r\n\r\n    if (props.modals.length > modals.length)\r\n      showModal();\r\n    else if (props.modals.length < modals.length)\r\n      hideModal();\r\n\r\n  }, [props.modals, modals]);\r\n\r\n  if (!modals.length)\r\n    return null;\r\n\r\n  return ( \r\n    <div id=\"modal-alert\" className={cs({ visible, opacity })}>\r\n      <div className=\"modal-alert-backdrop\" onClick={e => console.log('clicked backdrop')}/>\r\n      <div className=\"modal-alert-container\">\r\n        {modals[0]}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nModalWrapper.defaultProps = {\r\n  modals: [],\r\n  closeCurrentModal: () => console.log('closeCurrentModal() is not defined.')  \r\n}\r\n \r\nexport default ModalWrapper;","import React from 'react';\nimport UtilCommon from '../utils/util_common';\nimport { AppState, app_state_default } from './contexts';\nimport ModalAlert from './modals/modal_alert';\nimport ModalWrapper from './modals/modal_wrapper';\n\nfunction App() {\n  const reducer = (prev_state, new_state) => ({ ...prev_state, ...new_state });\n  const [state, setState] = React.useReducer(reducer, app_state_default);\n  const [message_modals, setMessageModals] = React.useState([\n    // <ModalAlert />\n  ]);  \n\n\n\n  // Functions for message_modals >>>>>>>>>>>>>>>>>>\n  function closeMessageModal(e) {\n    setMessageModals(p_modal_alerts => {\n      if (!p_modal_alerts.length)\n        return p_modal_alerts;\n       \n      let n_message_modals = p_modal_alerts.slice();\n      n_message_modals.shift();\n      if (!n_message_modals.length)\n        (document.getElementsByTagName('body')[0]).classList.remove('overflow-hidden');\n      return n_message_modals;  \n    });\n  }\n\n  async function pushMessageModal({Modal, props = {}, onConfirm = () => {}, onCancel = () => {}}) {\n    return new Promise((resolve, reject) => {\n      const body = document.getElementsByTagName('body')[0];\n      body.classList.add('overflow-hidden');\n\n      setMessageModals(p_message_modals => {\n        let n_message_modals = p_message_modals.slice();\n        n_message_modals.push((\n          <Modal\n            {...props}\n            onConfirm={e => {\n              onConfirm();\n              closeMessageModal();\n              resolve(true);\n            }}\n            onCancel={e => {\n              onCancel();\n              closeMessageModal();\n              resolve(false);\n            }}\n          />\n        ));\n        return n_message_modals;\n      });\n    });    \n  }\n  // <<<<<<<<<<<<<<<< Functions for message_modals\n\n\n\n  return (\n    <AppState.Provider value={Object.assign({}, state, {      \n      setState,\n      pushMessageModal,\n    })}>\n      <React.Fragment>\n        <ModalWrapper modals={message_modals} closeCurrentModal={closeMessageModal} />\n\n        <div style={{ height: `${100}vh`, whiteSpace: 'pre-wrap' }}>\n          <div>\n            <button type='button' onClick={async e => {\n              const modal_result = await pushMessageModal({\n                Modal: ModalAlert,\n                props: {\n                  message: '테스트 메세지입니다.'\n                },\n                onConfirm: () => { console.log('CONFIRM'); },\n                onCancel : () => { console.log('CANCEL 73473' ); }\n              });\n              console.log('MODAL_CONFIRMED? : ' + modal_result);\n              if (modal_result === false)\n                return;\n              await pushMessageModal({\n                Modal: ModalAlert,\n                props: {\n                  message: '테스트 메세지입니다. 2'\n                },\n                onConfirm: () => { console.log('CONFIRM'); },\n                onCancel : () => { console.log('CANCEL 52374' ); }\n              });\n            }}>\n              PUSH MODAL\n            </button>\n          </div>\n          <div>\n            {JSON.stringify(state) + '\\nTSET\\nTSET\\nTSET\\nTSET\\nTSET\\nTSET\\nTSET\\nTSET\\nTSET\\nTSET\\nTSET\\nTSET\\nTSET\\nTSET\\nTSET\\nTSET\\nTSET\\nTSET\\nTSET\\nTSET\\nTSET\\nTSET\\nTSET\\nTSET\\nTSET\\nTSET\\nTSET\\nTSET\\nTSET\\nTSET\\nTSET\\nTSET\\nTSET\\nTSET\\nTSET\\nTSET\\nTSET\\nTSET\\nTSET\\nTSET\\nTSET\\nTSET\\nTSET\\nTSET\\nTSET\\nTSET\\nTSET\\nTSET\\nTSET\\nTSET\\nTSET\\nTSET'}\n          </div>\n        </div>\n      </React.Fragment>\n    </AppState.Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/_styles.scss';\nimport App from './components/app';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}